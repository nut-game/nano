// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nut-game/nano (interfaces: Nano)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	cluster "github.com/nut-game/nano/cluster"
	component "github.com/nut-game/nano/component"
	config "github.com/nut-game/nano/config"
	interfaces "github.com/nut-game/nano/interfaces"
	metrics "github.com/nut-game/nano/metrics"
	router "github.com/nut-game/nano/router"
	session "github.com/nut-game/nano/session"
	worker "github.com/nut-game/nano/worker"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
)

// MockNano is a mock of Nano interface.
type MockNano struct {
	ctrl     *gomock.Controller
	recorder *MockNanoMockRecorder
}

// MockNanoMockRecorder is the mock recorder for MockNano.
type MockNanoMockRecorder struct {
	mock *MockNano
}

// NewMockNano creates a new mock instance.
func NewMockNano(ctrl *gomock.Controller) *MockNano {
	mock := &MockNano{ctrl: ctrl}
	mock.recorder = &MockNanoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNano) EXPECT() *MockNanoMockRecorder {
	return m.recorder
}

// AddRoute mocks base method.
func (m *MockNano) AddRoute(arg0 string, arg1 router.RoutingFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoute indicates an expected call of AddRoute.
func (mr *MockNanoMockRecorder) AddRoute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockNano)(nil).AddRoute), arg0, arg1)
}

// Documentation mocks base method.
func (m *MockNano) Documentation(arg0 bool) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documentation", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documentation indicates an expected call of Documentation.
func (mr *MockNanoMockRecorder) Documentation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documentation", reflect.TypeOf((*MockNano)(nil).Documentation), arg0)
}

// GetDieChan mocks base method.
func (m *MockNano) GetDieChan() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDieChan")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// GetDieChan indicates an expected call of GetDieChan.
func (mr *MockNanoMockRecorder) GetDieChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDieChan", reflect.TypeOf((*MockNano)(nil).GetDieChan))
}

// GetMetricsReporters mocks base method.
func (m *MockNano) GetMetricsReporters() []metrics.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsReporters")
	ret0, _ := ret[0].([]metrics.Reporter)
	return ret0
}

// GetMetricsReporters indicates an expected call of GetMetricsReporters.
func (mr *MockNanoMockRecorder) GetMetricsReporters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsReporters", reflect.TypeOf((*MockNano)(nil).GetMetricsReporters))
}

// GetModule mocks base method.
func (m *MockNano) GetModule(arg0 string) (interfaces.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", arg0)
	ret0, _ := ret[0].(interfaces.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule.
func (mr *MockNanoMockRecorder) GetModule(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockNano)(nil).GetModule), arg0)
}

// GetNumberOfConnectedClients mocks base method.
func (m *MockNano) GetNumberOfConnectedClients() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfConnectedClients")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetNumberOfConnectedClients indicates an expected call of GetNumberOfConnectedClients.
func (mr *MockNanoMockRecorder) GetNumberOfConnectedClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfConnectedClients", reflect.TypeOf((*MockNano)(nil).GetNumberOfConnectedClients))
}

// GetServer mocks base method.
func (m *MockNano) GetServer() *cluster.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*cluster.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockNanoMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockNano)(nil).GetServer))
}

// GetServerByID mocks base method.
func (m *MockNano) GetServerByID(arg0 string) (*cluster.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByID", arg0)
	ret0, _ := ret[0].(*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByID indicates an expected call of GetServerByID.
func (mr *MockNanoMockRecorder) GetServerByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByID", reflect.TypeOf((*MockNano)(nil).GetServerByID), arg0)
}

// GetServerID mocks base method.
func (m *MockNano) GetServerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerID indicates an expected call of GetServerID.
func (mr *MockNanoMockRecorder) GetServerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerID", reflect.TypeOf((*MockNano)(nil).GetServerID))
}

// GetServers mocks base method.
func (m *MockNano) GetServers() []*cluster.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]*cluster.Server)
	return ret0
}

// GetServers indicates an expected call of GetServers.
func (mr *MockNanoMockRecorder) GetServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockNano)(nil).GetServers))
}

// GetServersByType mocks base method.
func (m *MockNano) GetServersByType(arg0 string) (map[string]*cluster.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServersByType", arg0)
	ret0, _ := ret[0].(map[string]*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServersByType indicates an expected call of GetServersByType.
func (mr *MockNanoMockRecorder) GetServersByType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersByType", reflect.TypeOf((*MockNano)(nil).GetServersByType), arg0)
}

// GetSessionFromCtx mocks base method.
func (m *MockNano) GetSessionFromCtx(arg0 context.Context) session.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionFromCtx", arg0)
	ret0, _ := ret[0].(session.Session)
	return ret0
}

// GetSessionFromCtx indicates an expected call of GetSessionFromCtx.
func (mr *MockNanoMockRecorder) GetSessionFromCtx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionFromCtx", reflect.TypeOf((*MockNano)(nil).GetSessionFromCtx), arg0)
}

// GroupAddMember mocks base method.
func (m *MockNano) GroupAddMember(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupAddMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupAddMember indicates an expected call of GroupAddMember.
func (mr *MockNanoMockRecorder) GroupAddMember(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupAddMember", reflect.TypeOf((*MockNano)(nil).GroupAddMember), arg0, arg1, arg2)
}

// GroupBroadcast mocks base method.
func (m *MockNano) GroupBroadcast(arg0 context.Context, arg1, arg2, arg3 string, arg4 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBroadcast", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupBroadcast indicates an expected call of GroupBroadcast.
func (mr *MockNanoMockRecorder) GroupBroadcast(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBroadcast", reflect.TypeOf((*MockNano)(nil).GroupBroadcast), arg0, arg1, arg2, arg3, arg4)
}

// GroupContainsMember mocks base method.
func (m *MockNano) GroupContainsMember(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupContainsMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupContainsMember indicates an expected call of GroupContainsMember.
func (mr *MockNanoMockRecorder) GroupContainsMember(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupContainsMember", reflect.TypeOf((*MockNano)(nil).GroupContainsMember), arg0, arg1, arg2)
}

// GroupCountMembers mocks base method.
func (m *MockNano) GroupCountMembers(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCountMembers", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCountMembers indicates an expected call of GroupCountMembers.
func (mr *MockNanoMockRecorder) GroupCountMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCountMembers", reflect.TypeOf((*MockNano)(nil).GroupCountMembers), arg0, arg1)
}

// GroupCreate mocks base method.
func (m *MockNano) GroupCreate(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockNanoMockRecorder) GroupCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockNano)(nil).GroupCreate), arg0, arg1)
}

// GroupCreateWithTTL mocks base method.
func (m *MockNano) GroupCreateWithTTL(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreateWithTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreateWithTTL indicates an expected call of GroupCreateWithTTL.
func (mr *MockNanoMockRecorder) GroupCreateWithTTL(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreateWithTTL", reflect.TypeOf((*MockNano)(nil).GroupCreateWithTTL), arg0, arg1, arg2)
}

// GroupDelete mocks base method.
func (m *MockNano) GroupDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupDelete indicates an expected call of GroupDelete.
func (mr *MockNanoMockRecorder) GroupDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockNano)(nil).GroupDelete), arg0, arg1)
}

// GroupMembers mocks base method.
func (m *MockNano) GroupMembers(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMembers", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMembers indicates an expected call of GroupMembers.
func (mr *MockNanoMockRecorder) GroupMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMembers", reflect.TypeOf((*MockNano)(nil).GroupMembers), arg0, arg1)
}

// GroupRemoveAll mocks base method.
func (m *MockNano) GroupRemoveAll(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRemoveAll indicates an expected call of GroupRemoveAll.
func (mr *MockNanoMockRecorder) GroupRemoveAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveAll", reflect.TypeOf((*MockNano)(nil).GroupRemoveAll), arg0, arg1)
}

// GroupRemoveMember mocks base method.
func (m *MockNano) GroupRemoveMember(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRemoveMember indicates an expected call of GroupRemoveMember.
func (mr *MockNanoMockRecorder) GroupRemoveMember(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveMember", reflect.TypeOf((*MockNano)(nil).GroupRemoveMember), arg0, arg1, arg2)
}

// GroupRenewTTL mocks base method.
func (m *MockNano) GroupRenewTTL(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRenewTTL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRenewTTL indicates an expected call of GroupRenewTTL.
func (mr *MockNanoMockRecorder) GroupRenewTTL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRenewTTL", reflect.TypeOf((*MockNano)(nil).GroupRenewTTL), arg0, arg1)
}

// IsRunning mocks base method.
func (m *MockNano) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockNanoMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockNano)(nil).IsRunning))
}

// RPC mocks base method.
func (m *MockNano) RPC(arg0 context.Context, arg1 string, arg2, arg3 protoiface.MessageV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPC", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPC indicates an expected call of RPC.
func (mr *MockNanoMockRecorder) RPC(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPC", reflect.TypeOf((*MockNano)(nil).RPC), arg0, arg1, arg2, arg3)
}

// RPCTo mocks base method.
func (m *MockNano) RPCTo(arg0 context.Context, arg1, arg2 string, arg3, arg4 protoiface.MessageV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCTo", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPCTo indicates an expected call of RPCTo.
func (mr *MockNanoMockRecorder) RPCTo(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCTo", reflect.TypeOf((*MockNano)(nil).RPCTo), arg0, arg1, arg2, arg3, arg4)
}

// Register mocks base method.
func (m *MockNano) Register(arg0 component.Component, arg1 ...component.Option) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Register", varargs...)
}

// Register indicates an expected call of Register.
func (mr *MockNanoMockRecorder) Register(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNano)(nil).Register), varargs...)
}

// RegisterModule mocks base method.
func (m *MockNano) RegisterModule(arg0 interfaces.Module, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModule indicates an expected call of RegisterModule.
func (mr *MockNanoMockRecorder) RegisterModule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModule", reflect.TypeOf((*MockNano)(nil).RegisterModule), arg0, arg1)
}

// RegisterModuleAfter mocks base method.
func (m *MockNano) RegisterModuleAfter(arg0 interfaces.Module, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModuleAfter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModuleAfter indicates an expected call of RegisterModuleAfter.
func (mr *MockNanoMockRecorder) RegisterModuleAfter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModuleAfter", reflect.TypeOf((*MockNano)(nil).RegisterModuleAfter), arg0, arg1)
}

// RegisterModuleBefore mocks base method.
func (m *MockNano) RegisterModuleBefore(arg0 interfaces.Module, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModuleBefore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModuleBefore indicates an expected call of RegisterModuleBefore.
func (mr *MockNanoMockRecorder) RegisterModuleBefore(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModuleBefore", reflect.TypeOf((*MockNano)(nil).RegisterModuleBefore), arg0, arg1)
}

// RegisterRPCJob mocks base method.
func (m *MockNano) RegisterRPCJob(arg0 worker.RPCJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRPCJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRPCJob indicates an expected call of RegisterRPCJob.
func (mr *MockNanoMockRecorder) RegisterRPCJob(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRPCJob", reflect.TypeOf((*MockNano)(nil).RegisterRPCJob), arg0)
}

// RegisterRemote mocks base method.
func (m *MockNano) RegisterRemote(arg0 component.Component, arg1 ...component.Option) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterRemote", varargs...)
}

// RegisterRemote indicates an expected call of RegisterRemote.
func (mr *MockNanoMockRecorder) RegisterRemote(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRemote", reflect.TypeOf((*MockNano)(nil).RegisterRemote), varargs...)
}

// ReliableRPC mocks base method.
func (m *MockNano) ReliableRPC(arg0 string, arg1 map[string]any, arg2, arg3 protoiface.MessageV1) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReliableRPC", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReliableRPC indicates an expected call of ReliableRPC.
func (mr *MockNanoMockRecorder) ReliableRPC(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReliableRPC", reflect.TypeOf((*MockNano)(nil).ReliableRPC), arg0, arg1, arg2, arg3)
}

// ReliableRPCWithOptions mocks base method.
func (m *MockNano) ReliableRPCWithOptions(arg0 string, arg1 map[string]any, arg2, arg3 protoiface.MessageV1, arg4 *config.EnqueueOpts) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReliableRPCWithOptions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReliableRPCWithOptions indicates an expected call of ReliableRPCWithOptions.
func (mr *MockNanoMockRecorder) ReliableRPCWithOptions(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReliableRPCWithOptions", reflect.TypeOf((*MockNano)(nil).ReliableRPCWithOptions), arg0, arg1, arg2, arg3, arg4)
}

// SendKickToUsers mocks base method.
func (m *MockNano) SendKickToUsers(arg0 []string, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendKickToUsers", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendKickToUsers indicates an expected call of SendKickToUsers.
func (mr *MockNanoMockRecorder) SendKickToUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKickToUsers", reflect.TypeOf((*MockNano)(nil).SendKickToUsers), arg0, arg1)
}

// SendPushToUsers mocks base method.
func (m *MockNano) SendPushToUsers(arg0 string, arg1 any, arg2 []string, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPushToUsers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPushToUsers indicates an expected call of SendPushToUsers.
func (mr *MockNanoMockRecorder) SendPushToUsers(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPushToUsers", reflect.TypeOf((*MockNano)(nil).SendPushToUsers), arg0, arg1, arg2, arg3)
}

// SetDebug mocks base method.
func (m *MockNano) SetDebug(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebug", arg0)
}

// SetDebug indicates an expected call of SetDebug.
func (mr *MockNanoMockRecorder) SetDebug(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockNano)(nil).SetDebug), arg0)
}

// SetDictionary mocks base method.
func (m *MockNano) SetDictionary(arg0 map[string]uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDictionary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDictionary indicates an expected call of SetDictionary.
func (mr *MockNanoMockRecorder) SetDictionary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDictionary", reflect.TypeOf((*MockNano)(nil).SetDictionary), arg0)
}

// SetHeartbeatTime mocks base method.
func (m *MockNano) SetHeartbeatTime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeartbeatTime", arg0)
}

// SetHeartbeatTime indicates an expected call of SetHeartbeatTime.
func (mr *MockNanoMockRecorder) SetHeartbeatTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeartbeatTime", reflect.TypeOf((*MockNano)(nil).SetHeartbeatTime), arg0)
}

// Shutdown mocks base method.
func (m *MockNano) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockNanoMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockNano)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockNano) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNanoMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNano)(nil).Start))
}

// StartWorker mocks base method.
func (m *MockNano) StartWorker() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorker")
}

// StartWorker indicates an expected call of StartWorker.
func (mr *MockNanoMockRecorder) StartWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorker", reflect.TypeOf((*MockNano)(nil).StartWorker))
}
